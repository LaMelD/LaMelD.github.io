<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on LaMelD&#39;s dev Story</title>
    <link>https://lameld.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on LaMelD&#39;s dev Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Nov 2019 11:22:43 +0900</lastBuildDate>
    
	<atom:link href="https://lameld.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 블록 이동하기</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_block/</link>
      <pubDate>Wed, 27 Nov 2019 11:22:43 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_block/</guid>
      <description>카카오 블라인드 테스트 2020 - 블록 이동하기 문제 출처
 문제 설명  아래의 왼쪽과 같이 board의 정보가 input으로 주어진다. 0과 1로 이루어진 N x N 크기의 지도에서 2 x 1 크기의 로봇을 (1, 1) 에서 (N, N) 까지 이동시킨다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 외벽 점검</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_circular/</link>
      <pubDate>Wed, 27 Nov 2019 11:22:33 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_circular/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60062  문제 설명
 외벽이 원형으로 이루어진 레스토랑의 외벽을 점검한다. 외벽의 총 둘레는 n미터이다. 최소한의 인원을 투입하여 취약 지점을 점검한다. 정북 방향 지점을 0으로 한다. 인원들 각각이 1시간 동안 이동할 수 있는 거리는 다르다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 기둥과 보 설치</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_pole/</link>
      <pubDate>Wed, 27 Nov 2019 11:22:18 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_pole/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60061  문제 설명
 기둥과 보 조건  기둥 : 바닥 위에 있거나 보의 한쪽 끝 부분 위에 있거나, 또는 다른 기둥 위에 있어야 한다. 보 : 한쪽 끝 부분이 기둥 위에 있거나, 또는 양쪽 끝 부분이 다른 보와 동시에 연결되어 있어야 한다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 가사 검색</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_lyrics/</link>
      <pubDate>Wed, 27 Nov 2019 11:21:48 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_lyrics/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60060  문제 설명
 노래 가사에 사용된 단어들 중에 특정 키워드가 몇 개 포함되어 있는지 알 수 있는 프로그램   예제&amp;ldquo;fro??&amp;ldquo;는 &amp;ldquo;frodo&amp;rdquo;, &amp;ldquo;front&amp;rdquo;, &amp;ldquo;frost&amp;quot;에 매치되므로 3입니다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 자물쇠와 열쇠</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_lock/</link>
      <pubDate>Wed, 27 Nov 2019 11:21:28 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_lock/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60059 문제 설명  자물쇠의 크기 : M * M 열쇠의 크기 : N * N 열쇠는 회전과 이동이 가능하며 열쇠의 돌기 부분을 자물쇠 홈 부분에 맞게 채우면 자물쇠가 열리는 구조이다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 괄호 변환</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_convert/</link>
      <pubDate>Wed, 27 Nov 2019 11:21:17 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_convert/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60058 문제 설명  균형잡힌 괄호 문자열 : &amp;lsquo;(&amp;lsquo;의 개수와 &amp;lsquo;)&amp;lsquo;의 개수가 같다. 올바른 문자열 : &amp;lsquo;(&amp;lsquo;와 &amp;lsquo;)&amp;lsquo;의 괄호의 개수가 같고, 짝도 맞다. 해당 문제에서 제시된 설명은 다음과 같다.</description>
    </item>
    
    <item>
      <title>[Programmers][Kakao Blind 2020] 문자열 압축</title>
      <link>https://lameld.github.io/kakao/update/kko_blind_2020_zip/</link>
      <pubDate>Wed, 27 Nov 2019 11:21:08 +0900</pubDate>
      
      <guid>https://lameld.github.io/kakao/update/kko_blind_2020_zip/</guid>
      <description>문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/60057 문제 설명    데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.</description>
    </item>
    
    <item>
      <title>[Data Structure] Array</title>
      <link>https://lameld.github.io/study/ds_array/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lameld.github.io/study/ds_array/</guid>
      <description>Array(배열)  정적 배열 (Static Array)  기본적인 배열을 의미한다. C++에서 간단하게 선언이 가능하다.     1차원
 int arr0[3];int arr1[10] = { 0, };int arr2 = { 1,2,3,4 }; 2차원</description>
    </item>
    
    <item>
      <title>[Data Structure] Queue</title>
      <link>https://lameld.github.io/study/ds_queue/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lameld.github.io/study/ds_queue/</guid>
      <description>Queue(큐) 1. 개념  Queue는 FIFO(First In First Out)의 원리로 동작하는 자료구조이다. 동일한 자료의 집합을 다룬다는 면에서 Stack과 비슷하지만 가장 먼저 들어간 자료가 가장 늦게 나온다는 점이 다르다. 넣은 순서대로 자료를 꺼내가므로 순서대로 처리해야 하는 자료를 임시작으로 저장하는 용도로 흔히 사용한다.</description>
    </item>
    
    <item>
      <title>[Data Structure] Single Linked List</title>
      <link>https://lameld.github.io/study/ds_linkedlist/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lameld.github.io/study/ds_linkedlist/</guid>
      <description>Single Linked List (단순 연결 리스트) 1. 개념  하나의 노드에 필요한 정보를 담고 다음에 해당하는 노드를 가리키고 있는 자료구조로 포인터를 이용해 자료들을 선형으로 연결한 자료구조이다. [ 배열 ] 과 비교했을 때 추가 및 삭제가 쉽다는 장점이 있지만 접근할 때 O(n)만큼 걸린다는 단점이 있습니다.</description>
    </item>
    
    <item>
      <title>[Data Structure] Stack</title>
      <link>https://lameld.github.io/study/ds_stack/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lameld.github.io/study/ds_stack/</guid>
      <description>Stack(스택) 1. 개념  가장 늦게 들어간 자료가 가장 먼저 나가는 구조이다. 후입선출(LIFO, Last In First Out)이라고도 부른다. Stack에 데이터를 넣는 행동을 push, 데이터를 빼는 행동을 pop이라 한다. Stack의 가장 위 데이터를 가르키는 포인터를 top이라고 한다.</description>
    </item>
    
  </channel>
</rss>